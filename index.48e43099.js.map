{"mappings":"ACGA,MAAM,EAAO,ICDb,MAEE,YACE,EAAe,CACb,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CACD,CACA,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,YAAY,CAAG,EAAa,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EACtD,IAAI,CAAC,KAAK,CAAG,EAAa,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EAC/C,IAAI,CAAC,MAAM,CAAG,OACd,IAAI,CAAC,KAAK,CAAG,CACf,CAEA,UAAW,CACT,IAAI,CAAC,IAAI,CAAC,OACZ,CAEA,WAAY,CACV,IAAI,CAAC,IAAI,CAAC,QACZ,CAEA,UAAW,CACT,IAAI,CAAC,IAAI,CAAC,OACZ,CAEA,QAAS,CACP,IAAI,CAAC,IAAI,CAAC,KACZ,CAEA,KAAK,CAAS,CAAE,CACd,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,OAGF,IAAM,EAAY,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EAElD,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAAK,CAClC,IAAI,EAAO,EAAE,CAEb,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAAK,CAClC,IAAI,EAAM,EACN,EAAM,CAEQ,CAAA,UAAd,GACF,CAAA,EAAM,IAAI,CAAC,IAAI,CAAG,EAAI,CAAA,EAGN,SAAd,IACF,EAAM,IAAI,CAAC,IAAI,CAAG,EAAI,EACtB,EAAM,GAGU,OAAd,IACF,EAAM,EACN,EAAM,GAGU,SAAd,IACF,EAAM,EACN,EAAM,GAGR,IAAM,EAAQ,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,AAEpB,CAAA,IAAV,GACF,EAAK,IAAI,CAAC,EAEd,CAEA,EAAO,IAAI,CAAC,aAAa,CAAC,GAE1B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAAK,CAClC,IAAI,EAAM,EACN,EAAM,CAEQ,CAAA,UAAd,GACF,CAAA,EAAM,IAAI,CAAC,IAAI,CAAG,EAAI,CAAA,EAGN,SAAd,IACF,EAAM,IAAI,CAAC,IAAI,CAAG,EAAI,EACtB,EAAM,GAGU,OAAd,IACF,EAAM,EACN,EAAM,GAGU,SAAd,IACF,EAAM,EACN,EAAM,GAGR,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,CAAI,CAAC,EAAE,EAAI,CACpC,CACF,CAEK,IAAI,CAAC,YAAY,CAAC,EAAW,IAAI,CAAC,KAAK,GAC1C,IAAI,CAAC,eAAe,GAEtB,IAAI,CAAC,SAAS,EAChB,CAEA,cAAc,CAAM,CAAE,CACpB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,IAAI,CAAC,KAAK,EAAI,CAAM,CAAC,EAAE,CACvB,EAAO,MAAM,CAAC,EAAI,EAAG,IAIzB,KAAO,EAAO,MAAM,CAAG,IAAI,CAAC,IAAI,EAC9B,EAAO,IAAI,CAAC,GAGd,OAAO,CACT,CAEA,aAAa,CAAM,CAAE,CAAM,CAAE,CAC3B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,GAAI,CAAM,CAAC,EAAE,CAAC,EAAE,GAAK,CAAM,CAAC,EAAE,CAAC,EAAE,CAC/B,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,WAAY,CAKV,MAJoB,YAAhB,IAAI,CAAC,MAAM,EACb,IAAI,CAAC,OAAO,GAGP,IAAI,CAAC,MAAM,AACpB,CAEA,SAAU,CACR,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,GAAI,AAAqB,OAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAW,CAC7B,IAAI,CAAC,MAAM,CAAG,MAEd,MACF,CAIJ,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,GAAI,AAAqB,IAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAQ,CAC1B,IAAI,CAAC,MAAM,CAAG,UAEd,MACF,CAIJ,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAG,EAAG,IACjC,GAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,EAAE,CAAE,CAC7C,IAAI,CAAC,MAAM,CAAG,UAEd,MACF,CAIJ,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAG,EAAG,IACjC,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,GAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,EAAE,CAAC,EAAE,CAAE,CAC7C,IAAI,CAAC,MAAM,CAAG,UAEd,MACF,CAIJ,IAAI,CAAC,MAAM,CAAG,MAChB,CAEA,OAAQ,CACN,IAAI,CAAC,MAAM,CAAG,UACd,IAAI,CAAC,eAAe,GACpB,IAAI,CAAC,eAAe,EACtB,CAEA,SAAU,CACR,IAAI,CAAC,MAAM,CAAG,OACd,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EACpD,IAAI,CAAC,KAAK,CAAG,CACf,CAEA,iBAAkB,CAChB,IAAM,EAAa,EAAE,CAErB,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IACJ,IAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAClB,EAAW,IAAI,CAAC,CAAC,EAAG,EAAE,EAK5B,GAAI,EAAW,MAAM,CAAG,EAAG,CACzB,IAAM,EAAc,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAC1D,CAAC,EAAG,EAAE,CAAG,CAAU,CAAC,EAAY,AAEtC,CAAA,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,IAAI,CAAC,oBAAoB,EAC9C,CACF,CAEA,sBAAuB,CACrB,OAAO,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CACnC,CACF,EDpOM,EAAW,MAAM,IAAI,CAAC,SAAS,gBAAgB,CAAC,gBAChD,EAAS,SAAS,aAAa,CAAC,UAChC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAQ,SAAS,aAAa,CAAC,eA0CrC,SAAS,EAAY,CAAK,EACxB,EAAM,OAAO,CAAC,CAAC,EAAK,KAClB,EAAI,OAAO,CAAC,CAAC,EAAO,KAElB,IAAM,EAAU,CAAQ,CADV,AAAW,EAAX,EAAe,EACE,AAE3B,AAAU,CAAA,IAAV,GACF,EAAQ,SAAS,CAAG,CAAC,uBAAuB,EAAE,EAAM,CAAC,CACrD,EAAQ,WAAW,CAAG,CAAC,EAAE,EAAM,CAAC,GAEhC,EAAQ,SAAS,CAAG,aACpB,EAAQ,WAAW,CAAG,GAE1B,EACF,EACF,CAEA,SAAS,IACa,QAAhB,EAAK,MAAM,EACb,EAAW,SAAS,CAAC,MAAM,CAAC,UAGV,SAAhB,EAAK,MAAM,EACb,EAAY,SAAS,CAAC,MAAM,CAAC,UAE/B,EAAM,SAAS,CAAG,CAAC,EAAE,EAAK,QAAQ,GAAG,CAAC,AACxC,CAlEA,EAAO,gBAAgB,CAAC,QAAS,KAC/B,EAAK,OAAO,GACZ,EAAK,KAAK,GACV,EAAW,SAAS,CAAC,GAAG,CAAC,UACzB,EAAY,SAAS,CAAC,GAAG,CAAC,UAEC,UAAvB,EAAO,WAAW,GACpB,EAAa,KAAK,CAAC,OAAO,CAAG,OAC7B,EAAO,SAAS,CAAG,UACnB,EAAO,SAAS,CAAG,kBAErB,IACA,EAAY,EAAK,QAAQ,GAC3B,GAEA,SAAS,gBAAgB,CAAC,UAAW,AAAC,IACpC,OAAQ,EAAE,GAAG,EACX,IAAK,UACH,EAAK,MAAM,GACX,EAAY,EAAK,QAAQ,IACzB,IACA,KACF,KAAK,YACH,EAAK,QAAQ,GACb,EAAY,EAAK,QAAQ,IACzB,IACA,KACF,KAAK,YACH,EAAK,QAAQ,GACb,EAAY,EAAK,QAAQ,IACzB,IACA,KACF,KAAK,aACH,EAAK,SAAS,GACd,EAAY,EAAK,QAAQ,IACzB,GAEJ,CACF","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.size = 4;\n        this.defaultBoard = initialState.map((row)=>[\n                ...row\n            ]);\n        this.board = initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    moveLeft() {\n        this.move(\"left\");\n    }\n    moveRight() {\n        this.move(\"right\");\n    }\n    moveDown() {\n        this.move(\"down\");\n    }\n    moveUp() {\n        this.move(\"up\");\n    }\n    move(direction) {\n        if (this.status !== \"playing\") return;\n        const prevBoard = this.board.map((row)=>[\n                ...row\n            ]);\n        for(let i = 0; i < this.size; i++){\n            let line = [];\n            for(let j = 0; j < this.size; j++){\n                let row = i;\n                let col = j;\n                if (direction === \"right\") col = this.size - 1 - j;\n                if (direction === \"down\") {\n                    row = this.size - 1 - j;\n                    col = i;\n                }\n                if (direction === \"up\") {\n                    row = j;\n                    col = i;\n                }\n                if (direction === \"left\") {\n                    row = i;\n                    col = j;\n                }\n                const value = this.board[row][col];\n                if (value !== 0) line.push(value);\n            }\n            line = this.combineValues(line);\n            for(let j = 0; j < this.size; j++){\n                let row = i;\n                let col = j;\n                if (direction === \"right\") col = this.size - 1 - j;\n                if (direction === \"down\") {\n                    row = this.size - 1 - j;\n                    col = i;\n                }\n                if (direction === \"up\") {\n                    row = j;\n                    col = i;\n                }\n                if (direction === \"left\") {\n                    row = i;\n                    col = j;\n                }\n                this.board[row][col] = line[j] || 0;\n            }\n        }\n        if (!this.isBoardEqual(prevBoard, this.board)) this.addRandomNumber();\n        this.getStatus();\n    }\n    combineValues(values) {\n        for(let i = 0; i < values.length - 1; i++)if (values[i] === values[i + 1]) {\n            values[i] *= 2;\n            this.score += values[i];\n            values.splice(i + 1, 1);\n        }\n        while(values.length < this.size)values.push(0);\n        return values;\n    }\n    isBoardEqual(board1, board2) {\n        for(let i = 0; i < this.size; i++)for(let j = 0; j < this.size; j++){\n            if (board1[i][j] !== board2[i][j]) return false;\n        }\n        return true;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        if (this.status === \"playing\") this.canMove();\n        return this.status;\n    }\n    canMove() {\n        for(let i = 0; i < this.size; i++){\n            for(let j = 0; j < this.size; j++)if (this.board[i][j] === 2048) {\n                this.status = \"win\";\n                return;\n            }\n        }\n        for(let i = 0; i < this.size; i++){\n            for(let j = 0; j < this.size; j++)if (this.board[i][j] === 0) {\n                this.status = \"playing\";\n                return;\n            }\n        }\n        for(let i = 0; i < this.size; i++){\n            for(let j = 0; j < this.size - 1; j++)if (this.board[i][j] === this.board[i][j + 1]) {\n                this.status = \"playing\";\n                return;\n            }\n        }\n        for(let i = 0; i < this.size - 1; i++){\n            for(let j = 0; j < this.size; j++)if (this.board[i][j] === this.board[i + 1][j]) {\n                this.status = \"playing\";\n                return;\n            }\n        }\n        this.status = \"lose\";\n    }\n    start() {\n        this.status = \"playing\";\n        this.addRandomNumber();\n        this.addRandomNumber();\n    }\n    restart() {\n        this.status = \"idle\";\n        this.board = this.defaultBoard.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n    }\n    addRandomNumber() {\n        const emptyCells = [];\n        for(let i = 0; i < this.size; i++){\n            for(let j = 0; j < this.size; j++)if (this.board[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        if (emptyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const [x, y] = emptyCells[randomIndex];\n            this.board[x][y] = this.generateRandomNumber();\n        }\n    }\n    generateRandomNumber() {\n        return Math.random() < 0.1 ? 4 : 2;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$elements = Array.from(document.querySelectorAll(\".field-cell\"));\nconst $09e991522ca7e64e$var$button = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    if ($09e991522ca7e64e$var$button.textContent === \"Start\") {\n        $09e991522ca7e64e$var$messageStart.style.display = \"none\";\n        $09e991522ca7e64e$var$button.innerHTML = \"Restart\";\n        $09e991522ca7e64e$var$button.className = \"button restart\";\n    }\n    $09e991522ca7e64e$var$updateInformation();\n    $09e991522ca7e64e$var$updateBoard($09e991522ca7e64e$var$game.getState());\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    switch(e.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            $09e991522ca7e64e$var$updateBoard($09e991522ca7e64e$var$game.getState());\n            $09e991522ca7e64e$var$updateInformation();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            $09e991522ca7e64e$var$updateBoard($09e991522ca7e64e$var$game.getState());\n            $09e991522ca7e64e$var$updateInformation();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            $09e991522ca7e64e$var$updateBoard($09e991522ca7e64e$var$game.getState());\n            $09e991522ca7e64e$var$updateInformation();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            $09e991522ca7e64e$var$updateBoard($09e991522ca7e64e$var$game.getState());\n            $09e991522ca7e64e$var$updateInformation();\n            break;\n    }\n});\nfunction $09e991522ca7e64e$var$updateBoard(state) {\n    state.forEach((row, rowIndex)=>{\n        row.forEach((value, colIndex)=>{\n            const index = rowIndex * 4 + colIndex;\n            const element = $09e991522ca7e64e$var$elements[index];\n            if (value !== 0) {\n                element.className = `field-cell field-cell--${value}`;\n                element.textContent = `${value}`;\n            } else {\n                element.className = \"field-cell\";\n                element.textContent = \"\";\n            }\n        });\n    });\n}\nfunction $09e991522ca7e64e$var$updateInformation() {\n    if ($09e991522ca7e64e$var$game.status === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.status === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$score.innerHTML = `${$09e991522ca7e64e$var$game.getScore()}`;\n}\n\n\n//# sourceMappingURL=index.48e43099.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class.js');\nconst game = new Game();\nconst elements = Array.from(document.querySelectorAll('.field-cell'));\nconst button = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst score = document.querySelector('.game-score');\n\nbutton.addEventListener('click', () => {\n  game.restart();\n  game.start();\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  if (button.textContent === 'Start') {\n    messageStart.style.display = 'none';\n    button.innerHTML = 'Restart';\n    button.className = 'button restart';\n  }\n  updateInformation();\n  updateBoard(game.getState());\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      updateBoard(game.getState());\n      updateInformation();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      updateBoard(game.getState());\n      updateInformation();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      updateBoard(game.getState());\n      updateInformation();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      updateBoard(game.getState());\n      updateInformation();\n      break;\n  }\n});\n\nfunction updateBoard(state) {\n  state.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      const index = rowIndex * 4 + colIndex;\n      const element = elements[index];\n\n      if (value !== 0) {\n        element.className = `field-cell field-cell--${value}`;\n        element.textContent = `${value}`;\n      } else {\n        element.className = 'field-cell';\n        element.textContent = '';\n      }\n    });\n  });\n}\n\nfunction updateInformation() {\n  if (game.status === 'win') {\n    messageWin.classList.remove('hidden');\n  }\n\n  if (game.status === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n  score.innerHTML = `${game.getScore()}`;\n}\n","'use strict';\n\nclass Game {\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.size = 4;\n    this.defaultBoard = initialState.map((row) => [...row]);\n    this.board = initialState.map((row) => [...row]);\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  moveLeft() {\n    this.move('left');\n  }\n\n  moveRight() {\n    this.move('right');\n  }\n\n  moveDown() {\n    this.move('down');\n  }\n\n  moveUp() {\n    this.move('up');\n  }\n\n  move(direction) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const prevBoard = this.board.map((row) => [...row]);\n\n    for (let i = 0; i < this.size; i++) {\n      let line = [];\n\n      for (let j = 0; j < this.size; j++) {\n        let row = i;\n        let col = j;\n\n        if (direction === 'right') {\n          col = this.size - 1 - j;\n        }\n\n        if (direction === 'down') {\n          row = this.size - 1 - j;\n          col = i;\n        }\n\n        if (direction === 'up') {\n          row = j;\n          col = i;\n        }\n\n        if (direction === 'left') {\n          row = i;\n          col = j;\n        }\n\n        const value = this.board[row][col];\n\n        if (value !== 0) {\n          line.push(value);\n        }\n      }\n\n      line = this.combineValues(line);\n\n      for (let j = 0; j < this.size; j++) {\n        let row = i;\n        let col = j;\n\n        if (direction === 'right') {\n          col = this.size - 1 - j;\n        }\n\n        if (direction === 'down') {\n          row = this.size - 1 - j;\n          col = i;\n        }\n\n        if (direction === 'up') {\n          row = j;\n          col = i;\n        }\n\n        if (direction === 'left') {\n          row = i;\n          col = j;\n        }\n\n        this.board[row][col] = line[j] || 0;\n      }\n    }\n\n    if (!this.isBoardEqual(prevBoard, this.board)) {\n      this.addRandomNumber();\n    }\n    this.getStatus();\n  }\n\n  combineValues(values) {\n    for (let i = 0; i < values.length - 1; i++) {\n      if (values[i] === values[i + 1]) {\n        values[i] *= 2;\n        this.score += values[i];\n        values.splice(i + 1, 1);\n      }\n    }\n\n    while (values.length < this.size) {\n      values.push(0);\n    }\n\n    return values;\n  }\n\n  isBoardEqual(board1, board2) {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (board1[i][j] !== board2[i][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    if (this.status === 'playing') {\n      this.canMove();\n    }\n\n    return this.status;\n  }\n\n  canMove() {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 2048) {\n          this.status = 'win';\n\n          return;\n        }\n      }\n    }\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          this.status = 'playing';\n\n          return;\n        }\n      }\n    }\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size - 1; j++) {\n        if (this.board[i][j] === this.board[i][j + 1]) {\n          this.status = 'playing';\n\n          return;\n        }\n      }\n    }\n\n    for (let i = 0; i < this.size - 1; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === this.board[i + 1][j]) {\n          this.status = 'playing';\n\n          return;\n        }\n      }\n    }\n\n    this.status = 'lose';\n  }\n\n  start() {\n    this.status = 'playing';\n    this.addRandomNumber();\n    this.addRandomNumber();\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.board = this.defaultBoard.map((row) => [...row]);\n    this.score = 0;\n  }\n\n  addRandomNumber() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const [x, y] = emptyCells[randomIndex];\n\n      this.board[x][y] = this.generateRandomNumber();\n    }\n  }\n\n  generateRandomNumber() {\n    return Math.random() < 0.1 ? 4 : 2;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","size","defaultBoard","map","row","board","status","score","moveLeft","move","moveRight","moveDown","moveUp","direction","prevBoard","i","line","j","col","value","push","combineValues","isBoardEqual","addRandomNumber","getStatus","values","length","splice","board1","board2","getScore","getState","canMove","start","restart","emptyCells","randomIndex","Math","floor","random","x","y","generateRandomNumber","$09e991522ca7e64e$var$elements","Array","from","document","querySelectorAll","$09e991522ca7e64e$var$button","querySelector","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$updateBoard","state","forEach","rowIndex","colIndex","element","className","textContent","$09e991522ca7e64e$var$updateInformation","classList","remove","innerHTML","addEventListener","add","style","display","e","key"],"version":3,"file":"index.48e43099.js.map"}